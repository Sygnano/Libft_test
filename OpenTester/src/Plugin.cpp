#include <dlfcn.h>
#include <cstdio>
#include <cstdlib>
#include <dirent.h>
#include <string>
#include "Plugin.hpp"

Plugin::Plugin()
: _handle(nullptr)
, _name(nullptr)
, _identifier(nullptr)
, _author(nullptr)
, _desc(nullptr)
{

}

const char*
Plugin::name() const
{
    return _name;
}

const char**
Plugin::authors() const
{
    return _author;
}

const char*
Plugin::identifier() const
{
    return _identifier;
}

const char*
Plugin::desc() const
{
    return _desc;
}

bool
Plugin::valid() const
{
    return _handle != nullptr;
}

bool
Plugin::match(const char* filename) const
{
    typedef int (*matchfunc)(const char*);

    matchfunc mf = reinterpret_cast<matchfunc>(dlsym(_handle, "info_match"));
    return mf(filename);
}

void
Plugin::run(void* handle) const
{
    typedef void (*runfunc)(void*);

    runfunc rf = reinterpret_cast<runfunc>(dlsym(_handle, "ot_run_tests"));
    rf(handle);
}

void
Plugin::load(const char* filename)
{
    unload();
    _handle = dlopen(filename, RTLD_NOW);
    if (!_handle)
        printf("Could not load plugin %s\n", filename);
    _name = *static_cast<const char**>(dlsym(_handle, "info_name"));
    _identifier = *static_cast<const char**>(dlsym(_handle, "info_identifier"));
    _author = static_cast<const char**>(dlsym(_handle, "info_author"));
    _desc = *static_cast<const char**>(dlsym(_handle, "info_desc"));
}

void
Plugin::unload()
{
    if (_handle)
        dlclose(_handle);
    _handle = nullptr;
    _name = nullptr;
    _identifier = nullptr;
    _author = nullptr;
    _desc = nullptr;
}

Plugin::~Plugin()
{
    unload();
}

void
Plugin::loadPlugins(std::vector<Plugin*>& plugins)
{
    std::string path = getenv("HOME");
    DIR* dir;
    dirent* ent;

    path += "/.opentester/plugin/";
    dir = opendir(path.c_str());
    if (!dir)
    {
        printf("Could not open the plugin dir.\n");
        return;
    }
    while ((ent = readdir(dir)) != nullptr)
    {
        std::string fname = ent->d_name;
        if (fname.substr(fname.find_last_of('.') + 1) != "plugin")
            continue;
        fname = path + fname;
        Plugin* p = new Plugin;
        p->load(fname.c_str());
        if (!p->valid())
            delete p;
        else
            plugins.push_back(p);
    }
    closedir(dir);
}

