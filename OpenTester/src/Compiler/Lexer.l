%option noyywrap

%{
// register was deprecated in C++11
#include "Compiler/Compiler.hpp"
#include "Compiler/Parser.hpp"

#define register
#define EMIT_TOKEN(token)               yylval.tok = token; return token
#define EMIT_STRING(beg,end,token)      yylval.str = new char[yyleng + 1 - beg - end];            \
                                        strncpy(yylval.str, yytext + beg, yyleng - beg - end);    \
                                        yylval.str[yyleng - beg - end] = 0;                       \
                                        return token
%}

%x CODE
%x COMMENT
%s SYMBOL

%%

[ \t\r]+            {                                                   		}
\n                  { yylineno++; EMIT_TOKEN(tEOL);                     		}
"/*"				{ BEGIN(COMMENT);											}
<COMMENT>\n 		{ yylineno++;												}
<COMMENT>"*/"		{ BEGIN(INITIAL);											}
<COMMENT>.			{															}
"//".*              {                                                   		}
"%{"                { BEGIN(CODE);                                      		}
<CODE>.			    { yymore();									         		}
<CODE>\n  			{ yymore(); yylineno++; 									}
<CODE>"%}"			{ BEGIN(INITIAL); 				  EMIT_STRING(0, 2, tCODE); }
","                 { EMIT_TOKEN(tCOMMA);                               		}
":"					{ EMIT_TOKEN(tCOLON);										}
"%name"             { EMIT_TOKEN(tNAME);                                		}
"%author"           { EMIT_TOKEN(tAUTHOR);                              		}
"%identifier"       { EMIT_TOKEN(tIDENTIFIER);                          		}
"%desc"             { EMIT_TOKEN(tDESC);                                		}
"%match"			{ EMIT_TOKEN(tMATCH);										}
"%test"				{ EMIT_TOKEN(tTEST);										}
"%symbol"           { BEGIN(SYMBOL); EMIT_TOKEN(tSYMBOL);               		}
<SYMBOL>.*          { BEGIN(INITIAL); EMIT_STRING(0, 0, tSYMBOL_DATA);  		}
\"[^"]*\"           { EMIT_STRING(1, 1, tSTRING);                       		}
<<EOF>>				{ static int once = 0; return (once = !once) ? tEOL : 0; 	}
.                   {                                                   		}

%%
