R"=====(

#include <stdlib.h>
#include <unistd.h>
#include <stdio.h>
#include <signal.h>

#define OT_OK		0
#define OT_ERROR	1
#define	OT_NOTFOUND	2

#define assert_true(expr, msg)				if (!(expr)) {										\
												dprintf(_ot_fd, " -> %s, at %s", msg, #expr);	\
												exit(OT_ERROR);									\
											}

#define assert_false(expr, msg)				assert_true(!(expr), msg)
#define assert_equal(a, b, msg)				assert_true((a) == (b), msg)
#define assert_not_equal(a, b, msg)			assert_true((a) != (b), msg)
#define assert_less(a, b, msg)				assert_true((a) < (b), msg)
#define assert_more(a, b, msg)				assert_true((a) > (b), msg)
#define assert_less_or_equal(a, b, msg)		assert_true((a) <= (b), msg)
#define assert_more_or_equal(a, b, msg)		assert_true((a) >= (b), msg)
#define assert_zero(a, msg)					assert_true((a) == 0, msg)
#define assert_not_zero(a, msg)				assert_true((a) != 0, msg)

#define require_symbol(sym)	if (!sym) exit(OT_NOTFOUND)

typedef void (*ot_test_t)(int);

static void
print_header()
{
	printf("\033[37;1m[ \033[35;1m%s - %s \033[37;1m]\n", info_identifier, info_name);
}

static void
ot_run(ot_test_t test, const char* name)
{
	int fd[2];
	pid_t pid;
	const char* ret = "\033[36;1m????";
	char errMsg[4096] = {0};
	int retnum;
	bool err = false;

	printf("\033[37;1mRunning test %-40s", name);
	fflush(stdout);

	pipe(fd);

	pid = fork();

	if (!pid)
	{
		close(fd[0]);
		alarm(1);
		test(fd[1]);
		exit(0);
	}
	close(fd[1]);
	waitpid(pid, &retnum, 0);
	if (WIFEXITED(retnum))
	{
		switch(WEXITSTATUS(retnum))
		{
			case 0:
				ret = "\033[32;1mOk !";
				break;
			case 1:
				ret = "\033[31;1mFAIL";
				err = true;
				break;
			case 2:
				ret = "\033[30;1m----";
				break;
		}
	}
	else if (WIFSIGNALED(retnum))
	{
		switch(WTERMSIG(retnum))
		{
			case SIGILL:
			case SIGSEGV:
			case SIGBUS:
				ret = "\033[34;1mSEGV";
				break;
			case SIGALRM:
				ret = "\033[33;1mTIME";
				break;
		}
	}
	if (err)
	{
		int n;
		n = read(fd[0], errMsg, 4095);
		errMsg[n] = 0;
	}
	printf("[%s\033[37;1m]%s\033[0m\n", ret, errMsg);
}

)====="