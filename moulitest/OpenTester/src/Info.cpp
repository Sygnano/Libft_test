#include <vector>
#include <cstring>
#include <string>
#include "Info.hpp"
#include "Plugin.hpp"

static int
computeAuthorLen(const char** author)
{
    int l = 0;
    while (true)
    {
        if (*author == nullptr)
            return l;
        l += strlen(*author);
        author++;
        if (*author)
            l += 2;
    }
}

static void
hline(int a, int b, int c, int d)
{
    putchar('+');
    while (a--)
        putchar('-');
    putchar('+');
    while (b--)
        putchar('-');
    putchar('+');
    while (c--)
        putchar('-');
    putchar('+');
    while (d--)
        putchar('-');
    putchar('+');
    putchar('\n');
}

void
infoCommand(int ac, char** av)
{
    std::vector<Plugin*> plugins;
    int nameLen = strlen("name");
    int identifierLen = strlen("identifier");
    int authorLen = strlen("authors");
    int descLen = strlen("description");

    Plugin::loadPlugins(plugins);
    for (int i = 0; i < plugins.size(); ++i)
    {
        int tmp;
        Plugin& p = *(plugins[i]);

        if ((tmp = strlen(p.name())) > nameLen)
            nameLen = tmp;
        if ((tmp = strlen(p.identifier())) > identifierLen)
            identifierLen = tmp;
        if ((tmp = computeAuthorLen(p.authors())) > authorLen)
            authorLen = tmp;
        if ((tmp = strlen(p.desc())) > descLen)
            descLen = tmp;
    }
    nameLen++;
    identifierLen++;
    authorLen++;
    descLen++;

    hline(nameLen, identifierLen, authorLen, descLen);
    printf("|%*s|%*s|%*s|%*s|\n",
        nameLen, "name",
        identifierLen, "identifier",
        authorLen, "authors",
        descLen, "description"
    );
    hline(nameLen, identifierLen, authorLen, descLen);
    for (int i = 0; i < plugins.size(); ++i)
    {
        Plugin& p = *(plugins[i]);
        std::string author;

        const char** a = p.authors();
        while (true)
        {
            if (!(*a))
                break;
            author += *a;
            a++;
            if (*a)
                author += ", ";
        }

        printf("|%*s|%*s|%*s|%*s|\n",
                nameLen, p.name(),
                identifierLen, p.identifier(),
                authorLen, author.c_str(),
                descLen, p.desc()
        );
    }
    hline(nameLen, identifierLen, authorLen, descLen);
}
