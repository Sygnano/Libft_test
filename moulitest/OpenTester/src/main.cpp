#include <cstdio>
#include <string>
#include <cstdlib>
#include <sys/stat.h>
#include "Compiler/Compiler.hpp"
#include "Info.hpp"
#include "Run.hpp"

static void
initOpenTester()
{
    std::string home = getenv("HOME");
    std::string otDir = home + "/.opentester";
    std::string otDirPlugin = otDir + "/plugin";

    mkdir(otDir.c_str(), 0755);
    mkdir(otDirPlugin.c_str(), 0755);
}

static void
compile(int ac, char** av)
{
    Compiler c;

    if (ac == 0)
    {
        puts("usage: opentester compile <file>");
        exit(1);
    }
    for (int i = 0; i < ac; ++i)
        c.compile(av[i]);
}

static void
help(int ac, char** av)
{
    static const char* help = ""
        "usage: opentester <mode> [args...]\n"
        "\n"
        "mode can be one of the following:\n"
        "\n"
        "compile, c <file> [files...]\n"
        "    Compile an OpenTester test suite.\n"
        "    The compiled test suite is then installed to '$HOME/.opentester/plugin/'.\n"
        "\n"
        "run, r <target>\n"
        "    Run a test suite against a target.\n"
        "\n"
        "info, i\n"
        "    Display informations about installed test suites.\n"
        "\n"
        "help, h, ?\n"
        "    Show this message.\n"
        "\n"
        "OpenTester was created by Nax, from the OpenFT group.\n"
    "";

    printf("%s", help);
}

static void
usage()
{
    static const char* usage = ""
        "usage: opentester <mode> [args...]\n"
        "Use 'opentester help' to get more help.\n"
    "";

    printf("%s", usage);
}

static void
dispatchCommand(int argc, char** argv)
{
    typedef void (*commandPtr)(int, char**);
    struct command
    {
        const char* name;
        commandPtr func;
    };

    static const command cmd[] = {
        {"compile", compile},
        {"c", compile},
        {"run", runCommand},
        {"r", runCommand},
        {"info", infoCommand},
        {"i", infoCommand},
        {"help", help},
        {"h", help},
        {"?", help}
    };

    if (argc == 0)
        usage();
    else
    {
        for (int i = 0; i < sizeof(cmd) / sizeof(*cmd); ++i)
        {
            if (strcmp(argv[0], cmd[i].name) == 0)
            {
                cmd[i].func(argc - 1, argv + 1);
                return;
            }
        }
        printf("Unknown mode `%s`\n", argv[0]);
        exit(1);
    }
}

int
main(int argc, char** argv)
{
    initOpenTester();
    argc--;
    argv++;
    dispatchCommand(argc, argv);
    return 0;
}
