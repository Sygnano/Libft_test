%error-verbose

%{
    #include <cstdio>
    #include "Compiler/Compiler.hpp"
    #include "Compiler/Ast.hpp"

    extern int yylineno;

    static void
    yyerror(const char* error)
    {
        ::error(yylineno, error);
    }

    int    yylex();
%}

%union
{
    int     tok;
    char*   str;
    Ast*    ast;
    NTest*  test;
}

%token<tok>     tEOL            "end of line"
%token<tok>     tCOMMA          ","
%token<tok>     tCOLON          ":"
%token<tok>     tNAME           "%name"
%token<tok>     tAUTHOR         "%author"
%token<tok>     tIDENTIFIER     "%identifier"
%token<tok>     tDESC           "%desc"
%token<tok>     tSYMBOL         "%symbol"
%token<tok>     tMATCH          "%match"
%token<tok>     tTEST           "%test"
%token<str>     tSTRING         "string"
%token<str>     tCODE           "code"
%token<str>     tSYMBOL_DATA    "symbol data"

%type<ast>  ast ast_author
%type<test> test test_begin test_symbols

%%

ast
    :                                   { $$ = &global_ast;                     }
    | ast tNAME tSTRING tEOL            { $1->setName($3); delete [] $3;        }
    | ast_author tSTRING tEOL           { $1->addAuthor($2); delete [] $2;      }
    | ast tIDENTIFIER tSTRING tEOL      { $1->setIdentifier($3); delete [] $3;  }
    | ast tDESC tSTRING tEOL            { $1->setDesc($3); delete [] $3;        }
    | ast tMATCH tSTRING tEOL           { $1->addMatch($3); delete [] $3;       }
    | ast tSYMBOL tSYMBOL_DATA tEOL     { $1->addSymbol($3); delete [] $3;      }
    | ast tCODE tEOL                    { $1->addPrologue($2); delete [] $2;    }
    | ast test                          { $1->addTest($2);                      }
    | ast tEOL
    ;

ast_author
    : ast tAUTHOR
    | ast_author tSTRING tCOMMA    { $1->addAuthor($2); delete [] $2; }
    ;

test
    : test_begin tCODE tEOL     { $1->code = $2; delete [] $2;  }
    | test_symbols tCODE tEOL   { $1->code = $2; delete [] $2;  }
    ;

test_begin
    : tTEST tSTRING             { $$ = new NTest; $$->name = $2; delete [] $2;  }
    ;

test_symbols
    : test_begin tCOLON tSTRING     { $1->symbols.push_back($3); delete [] $3;  }
    | test_symbols tCOMMA tSTRING   { $1->symbols.push_back($3); delete [] $3;  }
    ;

%%
