#include <cstdio>
#include <cstdlib>
#include <sstream>
#include <iostream>
#include <unistd.h>
#include "Compiler/Compiler.hpp"
#include "Compiler/Parser.hpp"
#include "Compiler/Lexer.hpp"

Ast global_ast;

void    yyparse();

Compiler::Compiler()
: _halt(false)
{

}

void
Compiler::compile(const char* filename)
{
    FILE* f = fopen(filename, "r");

    if (!f)
    {
        printf("Could not open %s\n", filename);
        exit(1);
    }
    yyin = f;
    yyparse();
    checkAst();
    if (_halt)
        exit(1);
    fillBuffer();
    genPlugin();
    global_ast.flush();
}

void
Compiler::checkAst()
{
    if (global_ast._name == nullptr)
    {
        error(0, "no %name was set");
        _halt = true;
    }
    if (global_ast._authors.size() == 0)
    {
        warning(0, "no %author was set");
        global_ast.addAuthor("Unknown");
    }
    if (global_ast._identifier == nullptr)
    {
        warning(0, "no %identifier was set");
        global_ast.setIdentifier("Unknown");
    }
}

void
Compiler::fillBuffer()
{
    std::stringstream ss;

    ss << "#include <dlfcn.h>\n";
    ss << "#include <string.h>\n";
    ss << global_ast._prologue << '\n';
    ss << "const char* info_name = \"" << global_ast._name << "\";\n";
    ss << "const char* info_author[] = {";
    for (int i = 0; i < global_ast._authors.size(); ++i)
        ss << "\"" << global_ast._authors[i] << "\",";
    ss << "0};\n";
    ss << "const char* info_identifier = \"" << global_ast._identifier << "\";\n";
    ss << "const char* info_desc = \"" << global_ast._desc << "\";\n";
    ss << "int info_match(const char* filename) {\n";
    for (auto& str : global_ast._match)
        ss << "if (strcmp(filename, \"" << str << "\") == 0) return 1;\n";
    ss << "return 0;\n}\n";
    ss <<
        #include "Compiler/Bootstrap.c.inc"
        ;
    for (auto& s : global_ast._symbols)
        ss << "static " << s.type << ";\n";
    ss << "void bootstrap_symbols(void* handle) {\n";
    for (auto& s : global_ast._symbols)
    {
        ss << s.name << " = dlsym(handle, \"" << s.name << "\");\n";
    }
    ss << "}\n";
    for (auto& t : global_ast._tests)
    {
        ss << "static void ot_test_" << t->name << "(int _ot_fd) {\n";
        for (auto& s : t->symbols)
            ss << "require_symbol(" << s << ");\n";
        ss << t->code << "\n";
        ss << "}\n";
    }
    ss << "void ot_run_tests(void* handle) {\n";
    ss << "bootstrap_symbols(handle);\n";
    ss << "print_header();\n";
    for (auto& t : global_ast._tests)
        ss << "ot_run(ot_test_" << t->name << ", \"" << t->name << "\");\n";
    ss << "}\n";
    _buffer = ss.str();
}

void
Compiler::genPlugin()
{
    char path[] = "/tmp/tmp.XXXXXX";
    std::string cmd;
    std::string plugin;
    FILE* f;

    mktemp(path);

    plugin = getenv("HOME");
    plugin += "/.opentester/plugin/";
    plugin += global_ast._identifier;
    plugin += '.';
    plugin += global_ast._name;
    plugin += ".plugin";

    cmd = "cc -dynamiclib -x c ";
    cmd += path;
    cmd += " -o ";
    cmd += plugin;

    f = fopen(path, "w+");
    fwrite(_buffer.c_str(), _buffer.size(), 1, f);
    fclose(f);
    int ret = system(cmd.c_str());
    remove(path);

    if (ret == 0)
        printf("Plugin %s.%s.plugin was sucessfuly compiled.\n", global_ast._identifier, global_ast._name);
    else
        exit(1);
}

static void
compilerMsg(int line, const char* msg)
{
    printf("\e[37;1m: ");
    if (line)
        printf("at line %d, ", line);
    printf("%s\e[0m\n", msg);
}

void
error(int line, const char* error)
{
    printf("\e[31;1merror");
    compilerMsg(line, error);
}

void
warning(int line, const char* warning)
{
    printf("\e[35;1mwarning");
    compilerMsg(line, warning);
}
