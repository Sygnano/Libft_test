#include <cstring>
#include <cctype>
#include <iostream>
#include "Compiler/Ast.hpp"

Ast::Ast()
: _name(nullptr)
, _identifier(nullptr)
, _desc(nullptr)
{

}

void
Ast::setName(const char* name)
{
    _name = strdup(name);
}

void
Ast::addAuthor(const char* author)
{
    _authors.push_back(strdup(author));
}

void
Ast::setIdentifier(const char* identifier)
{
    _identifier = strdup(identifier);
}

void
Ast::setDesc(const char* desc)
{
    _desc = strdup(desc);
}

void
Ast::addMatch(const char* match)
{
    _match.push_back(match);
}

void
Ast::addPrologue(const char* prologue)
{
    _prologue += prologue;
}

void
Ast::addSymbol(const char* symbol)
{
    std::string sym = symbol;

    int parenPos = -1;
    int depth = 0;

    for (int i = 0; i < sym.size(); ++i)
    {
        if (sym[i] == '(')
        {
            if (depth == 0)
                parenPos = i;
            depth++;
        }
        else if (sym[i] == ')')
            depth--;
    }

    int namePos = parenPos;
    while (true)
    {
        int newNamePos = namePos - 1;
        if (isalnum(sym[newNamePos]) || sym[newNamePos] == '_')
        {
            namePos = newNamePos;
            if (namePos == 0)
                break;
        }
        else
            break;
    }
    int nameLen = parenPos - namePos;
    Symbol s;

    s.name = sym.substr(namePos, nameLen);
    s.type = sym.substr(0, namePos) + "(*" + s.name + ')' + sym.substr(parenPos, std::string::npos);
    _symbols.push_back(s);
}

void
Ast::addTest(NTest* test)
{
    _tests.push_back(test);
    for (auto& s : _symbols)
    {
        if (s.name == test->name)
        {
            test->symbols.push_back(test->name);
            break;
        }
    }
}

void
Ast::flush()
{
    *this = Ast(); // Dirtiest fix ever.
}

